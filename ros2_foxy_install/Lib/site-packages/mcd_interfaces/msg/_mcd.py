# generated from rosidl_generator_py/resource/_idl.py.em
# with input from mcd_interfaces:msg\MCD.idl
# generated code does not contain a copyright notice


# Import statements for member types

# Member 'hint_arr'
# Member 'flood_arr'
# Member 'trouble_arr'
import array  # noqa: E402, I100

import rosidl_parser.definition  # noqa: E402, I100


class Metaclass_MCD(type):
    """Metaclass of message 'MCD'."""

    _CREATE_ROS_MESSAGE = None
    _CONVERT_FROM_PY = None
    _CONVERT_TO_PY = None
    _DESTROY_ROS_MESSAGE = None
    _TYPE_SUPPORT = None

    __constants = {
    }

    @classmethod
    def __import_type_support__(cls):
        try:
            from rosidl_generator_py import import_type_support
            module = import_type_support('mcd_interfaces')
        except ImportError:
            import logging
            import traceback
            logger = logging.getLogger(
                'mcd_interfaces.msg.MCD')
            logger.debug(
                'Failed to import needed modules for type support:\n' +
                traceback.format_exc())
        else:
            cls._CREATE_ROS_MESSAGE = module.create_ros_message_msg__msg__mcd
            cls._CONVERT_FROM_PY = module.convert_from_py_msg__msg__mcd
            cls._CONVERT_TO_PY = module.convert_to_py_msg__msg__mcd
            cls._TYPE_SUPPORT = module.type_support_msg__msg__mcd
            cls._DESTROY_ROS_MESSAGE = module.destroy_ros_message_msg__msg__mcd

    @classmethod
    def __prepare__(cls, name, bases, **kwargs):
        # list constant names here so that they appear in the help text of
        # the message class under "Data and other attributes defined here:"
        # as well as populate each message instance
        return {
        }


class MCD(metaclass=Metaclass_MCD):
    """Message class 'MCD'."""

    __slots__ = [
        '_hint',
        '_flood',
        '_trouble',
        '_word',
        '_hint_arr',
        '_flood_arr',
        '_trouble_arr',
        '_word_arr',
    ]

    _fields_and_field_types = {
        'hint': 'int32',
        'flood': 'float',
        'trouble': 'double',
        'word': 'string',
        'hint_arr': 'sequence<int32>',
        'flood_arr': 'sequence<float>',
        'trouble_arr': 'sequence<double>',
        'word_arr': 'sequence<string>',
    }

    SLOT_TYPES = (
        rosidl_parser.definition.BasicType('int32'),  # noqa: E501
        rosidl_parser.definition.BasicType('float'),  # noqa: E501
        rosidl_parser.definition.BasicType('double'),  # noqa: E501
        rosidl_parser.definition.UnboundedString(),  # noqa: E501
        rosidl_parser.definition.UnboundedSequence(rosidl_parser.definition.BasicType('int32')),  # noqa: E501
        rosidl_parser.definition.UnboundedSequence(rosidl_parser.definition.BasicType('float')),  # noqa: E501
        rosidl_parser.definition.UnboundedSequence(rosidl_parser.definition.BasicType('double')),  # noqa: E501
        rosidl_parser.definition.UnboundedSequence(rosidl_parser.definition.UnboundedString()),  # noqa: E501
    )

    def __init__(self, **kwargs):
        assert all('_' + key in self.__slots__ for key in kwargs.keys()), \
            'Invalid arguments passed to constructor: %s' % \
            ', '.join(sorted(k for k in kwargs.keys() if '_' + k not in self.__slots__))
        self.hint = kwargs.get('hint', int())
        self.flood = kwargs.get('flood', float())
        self.trouble = kwargs.get('trouble', float())
        self.word = kwargs.get('word', str())
        self.hint_arr = array.array('i', kwargs.get('hint_arr', []))
        self.flood_arr = array.array('f', kwargs.get('flood_arr', []))
        self.trouble_arr = array.array('d', kwargs.get('trouble_arr', []))
        self.word_arr = kwargs.get('word_arr', [])

    def __repr__(self):
        typename = self.__class__.__module__.split('.')
        typename.pop()
        typename.append(self.__class__.__name__)
        args = []
        for s, t in zip(self.__slots__, self.SLOT_TYPES):
            field = getattr(self, s)
            fieldstr = repr(field)
            # We use Python array type for fields that can be directly stored
            # in them, and "normal" sequences for everything else.  If it is
            # a type that we store in an array, strip off the 'array' portion.
            if (
                isinstance(t, rosidl_parser.definition.AbstractSequence) and
                isinstance(t.value_type, rosidl_parser.definition.BasicType) and
                t.value_type.typename in ['float', 'double', 'int8', 'uint8', 'int16', 'uint16', 'int32', 'uint32', 'int64', 'uint64']
            ):
                if len(field) == 0:
                    fieldstr = '[]'
                else:
                    assert fieldstr.startswith('array(')
                    prefix = "array('X', "
                    suffix = ')'
                    fieldstr = fieldstr[len(prefix):-len(suffix)]
            args.append(s[1:] + '=' + fieldstr)
        return '%s(%s)' % ('.'.join(typename), ', '.join(args))

    def __eq__(self, other):
        if not isinstance(other, self.__class__):
            return False
        if self.hint != other.hint:
            return False
        if self.flood != other.flood:
            return False
        if self.trouble != other.trouble:
            return False
        if self.word != other.word:
            return False
        if self.hint_arr != other.hint_arr:
            return False
        if self.flood_arr != other.flood_arr:
            return False
        if self.trouble_arr != other.trouble_arr:
            return False
        if self.word_arr != other.word_arr:
            return False
        return True

    @classmethod
    def get_fields_and_field_types(cls):
        from copy import copy
        return copy(cls._fields_and_field_types)

    @property
    def hint(self):
        """Message field 'hint'."""
        return self._hint

    @hint.setter
    def hint(self, value):
        if __debug__:
            assert \
                isinstance(value, int), \
                "The 'hint' field must be of type 'int'"
            assert value >= -2147483648 and value < 2147483648, \
                "The 'hint' field must be an integer in [-2147483648, 2147483647]"
        self._hint = value

    @property
    def flood(self):
        """Message field 'flood'."""
        return self._flood

    @flood.setter
    def flood(self, value):
        if __debug__:
            assert \
                isinstance(value, float), \
                "The 'flood' field must be of type 'float'"
        self._flood = value

    @property
    def trouble(self):
        """Message field 'trouble'."""
        return self._trouble

    @trouble.setter
    def trouble(self, value):
        if __debug__:
            assert \
                isinstance(value, float), \
                "The 'trouble' field must be of type 'float'"
        self._trouble = value

    @property
    def word(self):
        """Message field 'word'."""
        return self._word

    @word.setter
    def word(self, value):
        if __debug__:
            assert \
                isinstance(value, str), \
                "The 'word' field must be of type 'str'"
        self._word = value

    @property
    def hint_arr(self):
        """Message field 'hint_arr'."""
        return self._hint_arr

    @hint_arr.setter
    def hint_arr(self, value):
        if isinstance(value, array.array):
            assert value.typecode == 'i', \
                "The 'hint_arr' array.array() must have the type code of 'i'"
            self._hint_arr = value
            return
        if __debug__:
            from collections.abc import Sequence
            from collections.abc import Set
            from collections import UserList
            from collections import UserString
            assert \
                ((isinstance(value, Sequence) or
                  isinstance(value, Set) or
                  isinstance(value, UserList)) and
                 not isinstance(value, str) and
                 not isinstance(value, UserString) and
                 all(isinstance(v, int) for v in value) and
                 all(val >= -2147483648 and val < 2147483648 for val in value)), \
                "The 'hint_arr' field must be a set or sequence and each value of type 'int' and each integer in [-2147483648, 2147483647]"
        self._hint_arr = array.array('i', value)

    @property
    def flood_arr(self):
        """Message field 'flood_arr'."""
        return self._flood_arr

    @flood_arr.setter
    def flood_arr(self, value):
        if isinstance(value, array.array):
            assert value.typecode == 'f', \
                "The 'flood_arr' array.array() must have the type code of 'f'"
            self._flood_arr = value
            return
        if __debug__:
            from collections.abc import Sequence
            from collections.abc import Set
            from collections import UserList
            from collections import UserString
            assert \
                ((isinstance(value, Sequence) or
                  isinstance(value, Set) or
                  isinstance(value, UserList)) and
                 not isinstance(value, str) and
                 not isinstance(value, UserString) and
                 all(isinstance(v, float) for v in value) and
                 True), \
                "The 'flood_arr' field must be a set or sequence and each value of type 'float'"
        self._flood_arr = array.array('f', value)

    @property
    def trouble_arr(self):
        """Message field 'trouble_arr'."""
        return self._trouble_arr

    @trouble_arr.setter
    def trouble_arr(self, value):
        if isinstance(value, array.array):
            assert value.typecode == 'd', \
                "The 'trouble_arr' array.array() must have the type code of 'd'"
            self._trouble_arr = value
            return
        if __debug__:
            from collections.abc import Sequence
            from collections.abc import Set
            from collections import UserList
            from collections import UserString
            assert \
                ((isinstance(value, Sequence) or
                  isinstance(value, Set) or
                  isinstance(value, UserList)) and
                 not isinstance(value, str) and
                 not isinstance(value, UserString) and
                 all(isinstance(v, float) for v in value) and
                 True), \
                "The 'trouble_arr' field must be a set or sequence and each value of type 'float'"
        self._trouble_arr = array.array('d', value)

    @property
    def word_arr(self):
        """Message field 'word_arr'."""
        return self._word_arr

    @word_arr.setter
    def word_arr(self, value):
        if __debug__:
            from collections.abc import Sequence
            from collections.abc import Set
            from collections import UserList
            from collections import UserString
            assert \
                ((isinstance(value, Sequence) or
                  isinstance(value, Set) or
                  isinstance(value, UserList)) and
                 not isinstance(value, str) and
                 not isinstance(value, UserString) and
                 all(isinstance(v, str) for v in value) and
                 True), \
                "The 'word_arr' field must be a set or sequence and each value of type 'str'"
        self._word_arr = value
